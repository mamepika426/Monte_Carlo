legend("bottomright",legend=leg,col=c("darkgrey","black","black"),lty=c("solid","longdash","dotdash"),pch=c(1,NA,NA),bty="n")
#List1.5
data("ToothGrowth")
#List1.5
d<-data("ToothGrowth")
d
summarize(d)
d?
ToothGrowth?
ToothGrowth
str("ToothGrowth")
str(ToothGrowth)
View(ToothGrowth)
data("ToothGrowth")
str(ToothGrowth)
View(ToothGrowth)
x<-ToothGrowth$len
y<-ToothGrowth$supp
sd<-sd(x)
n1<-sum(y=="OJ")
x1<-x[y=="OJ"]
mu1<-sum(x1)/(1+n1)
#sd1<-sd*sqrt(1+sum(y=="OJ"))
n2<-sum(y=="VC")
x2<-x[y=="VC"]
mu2<-sum(x2)/(1+n2)
#sd2<-sd*sqrt(1+n1+n2)/(())
q_denominator<-1+sqrt((1+n1+n2)/(1+n1)*(1+n2))*exp((-1/(2*sd^2))*(  ((sum(x))^2)/(1+n1+n2)  ((sum(x1))^2)/(1+n1) - ((sum(x2))^2)/(1+n2) )
q<-q/q_denominator
q<-1/q_denominator
q_denominator<-1+sqrt((1+n1+n2)/(1+n1)*(1+n2))*exp((-1/(2*sd^2))*(  ((sum(x))^2)/(1+n1+n2)  ((sum(x1))^2)/(1+n1) - ((sum(x2))^2)/(1+n2) )
q<-1/q_denominator
q<-1/q_denominator
q<-1/q_denominator
data("ToothGrowth")
str(ToothGrowth)
View(ToothGrowth)
x<-ToothGrowth$len
y<-ToothGrowth$supp
sd<-sd(x)
n1<-sum(y=="OJ")
x1<-x[y=="OJ"]
mu1<-sum(x1)/(1+n1)
#sd1<-sd*sqrt(1+sum(y=="OJ"))
n2<-sum(y=="VC")
x2<-x[y=="VC"]
mu2<-sum(x2)/(1+n2)
#sd2<-sd*sqrt(1+n1+n2)/(())
q_denominator<-1+sqrt((1+n1+n2)/(1+n1)*(1+n2))*exp((-1/(2*sd^2))*(  ((sum(x))^2)/(1+n1+n2)  ((sum(x1))^2)/(1+n1) - ((sum(x2))^2)/(1+n2) )
q<-1/q_denominator
#sd2<-sd*sqrt(1+n1+n2)/(())
q_denominator<-1+sqrt((1+n1+n2)/(1+n1)*(1+n2))*exp((-1/(2*sd^2))*(  ((sum(x))^2)/(1+n1+n2) - ((sum(x1))^2)/(1+n1) - ((sum(x2))^2)/(1+n2) ))
q<-1/q_denominator
q
data("ToothGrowth")
str(ToothGrowth)
View(ToothGrowth)
x<-ToothGrowth$len
y<-ToothGrowth$supp
sd<-sd(x)
n1<-sum(y=="OJ")
x1<-x[y=="OJ"]
mu1<-sum(x1)/(1+n1)
sd1<-sd*sqrt(1+sum(y=="OJ"))
n2<-sum(y=="VC")
x2<-x[y=="VC"]
mu2<-sum(x2)/(1+n2)
sd2<-sd*sqrt(1+sum(y=="VC"))
q<-1/(1+sqrt(1+n1+n2)/((1+n1)*(1+n2))*exp(-(sum(x^2)/(1+n1+n2)-sum(x1^2)/(1+n1)-sum(x2^2)/(1+n2))/(2*sd^2)))
log10(q/(1-q))
q<-1/(1+sqrt((1+n1+n2)/((1+n1)*(1+n2)))*exp(-(sum(x^2)/(1+n1+n2)-sum(x1^2)/(1+n1)-sum(x2^2)/(1+n2))/(2*sd^2)))
q<-1/(1+sqrt(1+n1+n2)/((1+n1)*(1+n2))*exp(-(sum(x^2)/(1+n1+n2)-sum(x1^2)/(1+n1)-sum(x2^2)/(1+n2))/(2*sd^2)))
q<-1/(1+sqrt((1+n1+n2)/((1+n1)*(1+n2)))*exp(-(sum(x^2)/(1+n1+n2)-sum(x1^2)/(1+n1)-sum(x2^2)/(1+n2))/(2*sd^2)))
#List1.6
data("airquality")
str(airquality)
data("airquality")
str(airquality)
x<-airquality$Solar.R[is.na(aiquality$Solar.R)+is.na(airquality$Ozone)==0]
y<-airquality$Ozone[is.na(airquality$Solar.R)+is.na(aiquality$Ozone)==0]  #x,yに欠損していないSolar.RとOzone入れる
sd<-31.33
ggplot(airquality.aes(x=Ozone))+stat_function(fun=dnorm,args=list(mean=sum(y)/(1+length(y)),sd=sd/sqrt(1+length(y))),color="blue")+
theme_bw()+xlim(35,50)
ggplot(airquality,aes(x=Ozone))+stat_function(fun=dnorm,args0list(mean=sum(x*y)/(1+sum(x^2)),sd=sd/sqrt(1+sum(x^2))),color="blue")+
thene_bw()+xlim(0.16,0.28)
log10(exp(1/(2*sd^2)*sum(x*y)^2/(1+sum(x^2)))*1/sqrt(1+sum(x^2)))
data("airquality")
str(airquality)
x<-airquality$Solar.R[is.na(aiquality$Solar.R)+is.na(airquality$Ozone)==0]
y<-airquality$Ozone[is.na(airquality$Solar.R)+is.na(aiquality$Ozone)==0]  #x,yに欠損していないSolar.RとOzone入れる
sd<-31.33
data("airquality")
str(airquality)
x<-airquality$Solar.R[is.na(airquality$Solar.R)+is.na(airquality$Ozone)==0]
y<-airquality$Ozone[is.na(airquality$Solar.R)+is.na(aiquality$Ozone)==0]  #x,yに欠損していないSolar.RとOzone入れる
sd<-31.33
data("airquality")
str(airquality)
x<-airquality$Solar.R[is.na(airquality$Solar.R)+is.na(airquality$Ozone)==0]
y<-airquality$Ozone[is.na(airquality$Solar.R)+is.na(airquality$Ozone)==0]  #x,yに欠損していないSolar.RとOzone入れる
sd<-31.33
ggplot(airquality.aes(x=Ozone))+stat_function(fun=dnorm,args=list(mean=sum(y)/(1+length(y)),sd=sd/sqrt(1+length(y))),color="blue")+
theme_bw()+xlim(35,50)
ggplot(airquality,aes(x=Ozone))+stat_function(fun=dnorm,args=list(mean=sum(y)/(1+length(y)),sd=sd/sqrt(1+length(y))),color="blue")+
theme_bw()+xlim(35,50)
ggplot(airquality,aes(x=Ozone))+stat_function(fun=dnorm,args0list(mean=sum(x*y)/(1+sum(x^2)),sd=sd/sqrt(1+sum(x^2))),color="blue")+
thene_bw()+xlim(0.16,0.28)
ggplot(airquality,aes(x=Ozone))+stat_function(fun=dnorm,args=list(mean=sum(x*y)/(1+sum(x^2)),sd=sd/sqrt(1+sum(x^2))),color="blue")+
thene_bw()+xlim(0.16,0.28)
ggplot(airquality,aes(x=Ozone))+stat_function(fun=dnorm,args=list(mean=sum(x*y)/(1+sum(x^2)),sd=sd/sqrt(1+sum(x^2))),color="blue")+
theme_bw()+xlim(0.16,0.28)
log10(exp(1/(2*sd^2)*sum(x*y)^2/(1+sum(x^2)))*1/sqrt(1+sum(x^2)))
x <- rgamma(N,alpha[1])
N <- 1e3
alpha <- c(1,1.5,1.8)
x <- rgamma(N,alpha[1])
N <- 1e3
alpha <- c(1,1.5,1.8)
x <- rgamma(N,alpha[1])
y <- rgamma(N,alpha[2])
z <- rgamma(N,alpha[3])
w <- x+y+z
plot_ly(x=x/w,y=y/w,z=z/w,type="scatter3d",mode="markers",size=0.1)
install.packages("plotly")
library(plotly)
library(magrittr)
plot_ly(iris, x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species, type = "scatter")
plot_ly(iris, x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species)
plot_ly(iris, x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species,type="scatter")
iris
View(iris)
type(iris)
is.data.frame(iris)
plot_ly(x=x/w,y=y/w,z=z/w,type="scatter3d",mode="markers",size=0.1)
set.seed(1)
runif(3)
set.seed(1)
runif(3)
set.seed(1)
runif(3)
set.seed(2)
runif(3)
set.seed(1)
u <- runif(1000)
ks.test(u,punif)
u
punif
RNGkind()
#List2.4 RANDU法
x <- numeric(1e2)
x
x <- numeric(1e2)
y <- 1234
n <- 2^31 -1
a <- 65539
b <- 0
for(i in 1:length(x)){
y <- (a*y+b)%%n
x[i] <- y/n
}
x[1:3]
}
for(i in 1:length(x)){
y <- (a*y+b)%%n
x[i] <- y/n
}
x[1:3]
ks.test(x,punif)
set.seed(1)
lambda <- 2
u <- runif(3)
-(log(u))/lambda
rexp(3,rate=lambda)
install.packages("microbenchmark")
library(microbenchmark)
lambda <- 2
n <- 1e5
microbenchmark(A <- (log(runif(n)))/lambda,times=100)
microbenchmark(B <- rexp(n,rate=lambda),times=100)
n <- 1e5
microbenchmark(A <- tan(pi*(runif(n)-1/2)))
microbenchmark(A <- tan(pi*(runif(n)-1/2)),times=100)
microbenchmark(B <- rnorm(n)/rnorm(n),times=100)
microbenchmark(C <- rcauchy(n),times=100)
pgeom(0.2)
plot(pgeom(0.2),3,5)
plot(pgeom(prob=0.2),3,5)
?pgeom
plot(pgeom(20prob=0.2),3,5)
x <- seq(0,10,length=10000)
y <- pgeom(as.integer(x))
y <- as.integer(x)
z <- pgeom(z,,0.2)
z <- pgeom(z,,prob=0.2)
df <- data.frame(x=x,y=y,z=z)
plot_ly(df,x=~x,y=~z,type="scatter")
View(df)
plot(sin,-pi/2,pi/2)
curve(dt(x,20),-4,4,type="l",lwd=3,col=1)
curve(pgeom(x,prob=0.2),-4,4,type="l",lwd=3,col=1)
curve(pgeom(x,prob=0.2),-4,10,type="l",lwd=3,col=1)
curve(pgeom(x,prob=0.2),-1,2,type="l",lwd=3,col=1)
curve(pgeom(x,prob=0.2),-1,2,type="l",lwd=2,col=1)
?curve
plot(qnorm)
plot(qpgeom(x,prob=0.2))
plot(pgeom(x,prob=0.2))
plot(pgeom(prob=0.2))
?plot
plot(pgeom(x,prob=0.2),type="l")
?plot
x <- seq(0,10,length=10000)
x <- seq(0,10,length=10000)
y <- as.integer(x)
z <- pgeom(z,,prob=0.2)
x <- seq(0,10,length=10000)
y <- as.integer(x)
z <- pgeom(y,,prob=0.2)
curve(pgeom(x,prob=0.2),-1,2,type="l",lwd=2,col=1)
curve(dgeom(x,prob=0.2),-1,2,type="l",lwd=2,col=1)
curve(pgeom(x,prob=0.2),-1,2,type="l",lwd=2,col=1)
curve(dgeom(x,prob=0.2),-1,2,type="l",lwd=2,col=1)
plot(0:10,dgeom(0:10,prob=0.2),type="h")
curve(geom(x,prob=0.2),-1,2,type="l",lwd=2,col=1)
curve(pgeom(x,prob=0.2),-1,2,type="l",lwd=2,col=1)
plot(0:10,pgeom(0:10,prob=0.2),type="h")
plot(0:10,pgeom(0:10,prob=0.2),type="l")
plot(0:10,pgeom(0:10,prob=0.2),type="h")
plot(0:10,pgeom(0:10,prob=0.2),type="s")
plot(0:10,dgeom(0:10,prob=0.2),type="h")
plot(0:10,pgeom(0:10,prob=0.2),type="s")
p <- 0.2
n <- 3
as.integer(log(runif(n))/log(1-p))
p <- 0.2
n <- 5
as.integer(log(runif(n))/log(1-p))
rgeom(n,prob=p)
microbenchmark(A<-as.integer(log(runif(n))/log(1-p)),times=100)
microbenchmark(B <- rgeom(n,prob=p),times=100)
rpoisf <- function(n,lambda){
c <- exp(-lambda)
res <- numeric(n)
for(i in 1:n){
x <- 0
q <- c
F <- c
u <- runif(1)
while(F<u){
x <- x+1
F <- F + q*lambda/x
}
res[i] <- x
}
retrun(res)
}
rpoisf(n,lambda)
lambda <- 2
rpoisf <- function(n,lambda){
c <- exp(-lambda)
res <- numeric(n)
for(i in 1:n){
x <- 0
q <- c
F <- c
u <- runif(1)
while(F<u){
x <- x+1
F <- F + q*lambda/x
}
res[i] <- x
}
return(res)
}
n <- 100
rpoisf(n,lambda)
?ks.test
ks.test(data,rpois)
ks.test(data,rpois(lambda=2))
ks.test(data,rpois(n,lambda=2))
ks.test(data,pnorm)
ks.test(data,punif)
data <- rpoisf(n,lambda)
data <- rpoisf(n,lambda)
ks.test(data,punif)
rpoisf <- function(n,lambda){
c <- exp(-lambda)
res <- numeric(n)
for(i in 1:n){
x <- 0
q <- c
F <- c
u <- runif(1)
while(F<u){
x <- x+1
F <- F + q*lambda/x
q <- q*lambda/x
}
res[i] <- x
}
return(res)
}
n <- 100
rpoisf(n,lambda)
po_1 <- rpoisf(n,lambda)
po_2 <- rpoisf(n,lambda)
po_2
mean(po_2)
mean(po_1)
po_1 <- rpoisf(n,lambda)
mean(po_1)
po_2 <- rpoisf(n,lambda)
mean(po_2)
microbenchmark(A<-rpoisf(n,lambda),times=100)
microbenchmark(B<-rpois(n,lambda),times=100)
#List2.10 近似累積分布関数による乱数生成
?qnorm
#List2.10 近似累積分布関数による乱数生成
pnorm(10,mean=0,sd=1)
#List2.10 近似累積分布関数による乱数生成
pnorm(3,mean=0,sd=1)
#List2.10 近似累積分布関数による乱数生成
pnorm(2,mean=0,sd=1)
set.seed(1)
m <- 3
set.seed(1)
rnorm(m)
qnorm(c(runif(2*m)[seq(from=1,to=2*m-1,by=2)]))
set.seed(1)
rnorm(m)
set.seed(1)
qnorm(c(runif(2*m)[seq(from=1,to=2*m-1,by=2)]))
c(runif(2*m)[seq(from=1,to=2*m-1,by=2)])
c(runif(2*m))
set.seed(1)
m <- 3
set.seed(1)
rnorm(m)
set.seed(1)
qnorm(c(runif(2*m)[seq(from=1,to=2*m-1,by=2)]))
?qnorm
?Random
x <- -log(matrix(n*shape1),ncol=n)
shape1 <- 2
shape2 <- 3
rbetar <- function(n,shape1,shape2){
x <- -log(matrix(n*shape1),ncol=n)
x
rbetar <- function(n,shape1,shape2){
x <- -log(matrix(n*shape1),ncol=n)
x
}
rbetar(3,shape1,shape2)
rbetar(3,shape1,shape2)
rbetar <- function(n,shape1,shape2){
x <- -log(matrix(n*shape1),ncol=n)
return(x)
}
rbetar(3,shape1,shape2)
shape1 <- 2
shape2 <- 3
rbetar <- function(n,shape1,shape2){
x <- -log(matrix(n*shape1),ncol=n)
return(x)
}
rbetar(3,shape1,shape2)
rbetar(3,shape1,shape2)
shape1 <- 2
shape2 <- 3
rbetar <- function(n,shape1,shape2){
x <- -log(matrix(runif(n*shape1)),ncol=n)
return(x)
}
rbetar(3,shape1,shape2)
shape1 <- 2
shape2 <- 3
rbetar <- function(n,shape1,shape2){
x <- -log(matrix(runif(n*shape1),ncol=n))
return(x)
}
rbetar(3,shape1,shape2)
rbetar(3,shape1,shape2)
shape1 <- 2
shape2 <- 3
rbetar <- function(n,shape1,shape2){
x <- apply(-log(matrix(runif(n*shape1),ncol=n)),2,sum)
y <- apply(-log(matrix(runif(n,shape2),ncol=n)),2,sum)
x/x+y
}
rbetar(3,shape1,shape2)
set.seed(1)
m <- 3
set.seed(1)
rnorm(m)
set.seed(1)
qnorm(c(runif(2*m)[seq(from=1,to=2*m-1,by=2)]))
qnorm(c(runif(2*m)[seq(from=1,to=2*m-1,by=2)]))
lambda <- 2
rpoisf <- function(n,lambda){
c <- exp(-lambda)
res <- numeric(n)
for(i in 1:n){
x <- 0
q <- c
F <- c
u <- runif(1)
while(F<u){
x <- x+1
F <- F + q*lambda/x
q <- q*lambda/x
}
res[i] <- x
}
return(res)
}
n <- 1e5
microbenchmark(A<-rpoisf(n,lambda),times=100)
microbenchmark(B<-rpois(n,lambda),times=100)
library(microbenchmark)
p <- 0.2
n <- 5
as.integer(log(runif(n))/log(1-p))
rgeom(n,prob=p)
microbenchmark(A<-as.integer(log(runif(n))/log(1-p)),times=100)
microbenchmark(B <- rgeom(n,prob=p),times=100)
set.seed(1)
m <- 3
set.seed(1)
rnorm(m)
set.seed(1)
qnorm(c(runif(2*m)[seq(from=1,to=2*m-1,by=2)]))
shape1 <- 2
shape2 <- 3
rbetar <- function(n,shape1,shape2){
x <- apply(-log(matrix(runif(n*shape1),ncol=n)),2,sum)
y <- apply(-log(matrix(runif(n,shape2),ncol=n)),2,sum)
x/x+y
}
rbetar(3,shape1,shape2)
n <- 1e5
RNGkind(normal.kind='default')
microbenchmark(A <- rnorm(n),times=100)
RNGkind(normal.kind='default')
RNGkind(normal.kind='Box_Muller')
microbenchmark(B <- rnorm(n),times=100)
RNGkind(normal.kind='Box-Muller')
microbenchmark(B <- rnorm(n),times=100)
alpha <- 2.5
beta <- 3
R <- ( (alpha-1)/(alpha-beta-2) )^(alpha-1)*( (beta-1)/(alpha-beta-2) )^(beta-1)/beta(alpha,beta)
rbetar <- function(n){
z <- numeric(n)
for(i in 1:n){
u <- runif(1);y <- runif(1);
while(R*u<dbeta(y,shape1=alpha,shape2=beta)){
u <- runif(1);y<-runif(1);
}
z[i] <- y
}
return(z)
}
rbetar(3)
alpha <- 2.5
beta <- 3
R <- ( (alpha-1)/(alpha-beta-2) )^(alpha-1)*( (beta-1)/(alpha-beta-2) )^(beta-1)/beta(alpha,beta)
rbetar <- function(n){
z <- numeric(n)
for(i in 1:n){
u <- runif(1);y <- runif(1);
while(1){
u <- runif(1);y<-runif(1);
}
z[i] <- y ## zに乱数格納
}
return(z)
}
rbetar(3)
alpha <- 2.5
beta <- 3
R <- ( (alpha-1)/(alpha-beta-2) )^(alpha-1)*( (beta-1)/(alpha-beta-2) )^(beta-1)/beta(alpha,beta)
rbetar <- function(n){
z <- numeric(n)
for(i in 1:n){
u <- runif(1);y <- runif(1);
while(1){
u <- runif(1);y<-runif(1);
}
z[i] <- y ## zに乱数格納
}
return(z)
}
rbetar(3)
n <- 1e5
RNGkind(normal.kind='default')
microbenchmark(A <- rnorm(n),times=100)
RNGkind(normal.kind='default')A
microbenchmark(A <- rnorm(n),times=100)
alpha <- 2.5
beta <- 3
R <- ( (alpha-1)/(alpha-beta-2) )^(alpha-1)*( (beta-1)/(alpha-beta-2) )^(beta-1)/beta(alpha,beta)
rbetar <- function(n){
z <- numeric(n)
for(i in 1:n){
u <- runif(1);y <- runif(1);
while(1){
u <- runif(1);y<-runif(1);
}
z[i] <- y ## zに乱数格納
}
return(z)
}
rbetar(3)
